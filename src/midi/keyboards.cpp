#include <bits/stdint-intn.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "midi/keyboards.hpp"
#include <ncurses.h>

enum Switch MIDI = Switch::OFF;

Keyboard::Keyboard() :/*{{{*/
	device( NULL ),
	port( "hw:1,0,0" )
{
	*name = '\0';
	activeMode = false;
	passiveMode = false;
	part = 1;
}/*}}}*/

void Keyboard::set_buffer( const struct System &_Buffer ) noexcept/*{{{*/
{
	buffer = _Buffer;
}/*}}}*/

void Keyboard::reset_variation() noexcept/*{{{*/
{
	variacion = buffer.variacion_inicial;
}/*}}}*/

void Keyboard::prev_variation() noexcept/*{{{*/
{
	if ( variacion > 0 )
		set_variation( variacion - 1 );
}/*}}}*/

void Keyboard::next_variation() noexcept/*{{{*/
{
	if ( variacion < buffer.n_variaciones - 1 )
		set_variation( variacion + 1 );
}/*}}}*/

void Keyboard::set_variation( const int16_t _Variacion ) noexcept/*{{{*/
{
	variacion = _Variacion;
	dump_variation();
}/*}}}*/

void Keyboard::dump_variation() noexcept/*{{{*/
{
	// sleep
	/*
	 * static struct timespec keyboardTimer;
		keyboardTimer.tv_sec 	= 0;
		keyboardTimer.tv_nsec	= 200000000;
	*/

	// apagar sonidos
	//	unsigned char allSoundsOff[3] = {0xB0, 0x7B, 0x7F};

	// cambio de página
	//	unsigned char pageSysEx[2][7] =    {{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x00, 0xF7},
	//										{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x01, 0xF7}};
				
	///////////////////- Track: col 7 - control: col 9 - Value: col 11 /////////////////////////

	// Status (todos en OFF)
		unsigned char x50_on_off[8][13] = 
		{	{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x04, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x05, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x06, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x01, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0xF7}	};

	// Lower Key (C-1)
		unsigned char x50_lower_key[8][13] = 
		{	{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x03, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x05, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x06, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x07, 0x00, 0x22, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x08, 0x00, 0x22, 0x00, 0x00, 0xF7}	};

	// Upper Key (C-1)
		unsigned char x50_upper_key[8][13] = 
		{	{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x01, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x02, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x03, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x04, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x05, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x06, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x07, 0x00, 0x1F, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x08, 0x00, 0x1F, 0x00, 0x00, 0xF7}	};

	// Transposition (0)
		unsigned char x50_transposition[8][13] = 
		{	{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x01, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x07, 0x00, 0x0A, 0x00, 0x00, 0xF7},
			{0xF0, 0x42, 0x30, 0x7A, 0x41, 0x01, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x00, 0xF7}	};

	// Ajuste
	for ( int16_t i = 0; i < 8; ++i ) {
		// status
		if ( buffer.variacion[variacion].track[i].status == ON )
			x50_on_off[i][11] = 0x00; // -> ON
		// zone
		x50_lower_key[i][11] = buffer.variacion[variacion].track[i].lower_key;
		x50_upper_key[i][11] = buffer.variacion[variacion].track[i].upper_key;
		// transposition =	columna 11 hacemos + porque es número negativo, de este modo
		// 					obtenemos una RESTA
		if ( buffer.variacion[variacion].track[i].transposition < 0 ) {
			x50_transposition[i][10] = 0x7F;
			x50_transposition[i][11] = 0x80 + buffer.variacion[variacion].track[i].transposition;
		}
		else
			x50_transposition[i][11] = buffer.variacion[variacion].track[i].transposition;
	}

	snd_rawmidi_open( NULL, &device, port, SND_RAWMIDI_SYNC );
		for ( int16_t channel = 0; channel < 8; ++channel ) {
			snd_rawmidi_write( device, x50_on_off[channel], 13 );
			snd_rawmidi_write( device, x50_lower_key[channel], 13);
			snd_rawmidi_write( device, x50_upper_key[channel], 13);
			snd_rawmidi_write( device, x50_transposition[channel], 13);
		}
	snd_rawmidi_close( device );
	
	device = NULL;
}/*}}}*/

void Keyboard::dump_variation( const struct System &_Buffer, const int16_t &_Variacion ) noexcept/*{{{*/
{
	set_buffer( _Buffer );
	variacion = _Variacion;
	dump_variation();
}/*}}}*/

void Keyboard::set_name(const char *id)/*{{{*/
{
	sprintf(name, "%s", id);
}/*}}}*/

void Keyboard::select_page( const enum Page &_Pagina ) noexcept/*{{{*/
{
	// sleep
	static struct timespec keyboardTimer;
		keyboardTimer.tv_sec 	= 0;
		keyboardTimer.tv_nsec	= 200000000;

	// cambio de página
	unsigned char pageSysEx[2][7] =    {{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x00, 0xF7},
										{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x01, 0xF7}};

	snd_rawmidi_open(NULL, &device, port, SND_RAWMIDI_SYNC);
		snd_rawmidi_write( device, pageSysEx[ _Pagina ], 7 );
		nanosleep( &keyboardTimer, NULL );
	snd_rawmidi_close(device); /*CLOSE*/
	device = NULL;

	set_variation( buffer.variacion_inicial );
}/*}}}*/

void Keyboard::set_modality(short toMode)/*{{{*/
{
	snd_rawmidi_t *device = NULL;
	const char *port = "hw:1,0,0";
	unsigned char sysex[7] = {0xF0, 0x42, 0x00, 0x7A, 0x4E, 0x00, 0xF7}; //Ch = sysex[2] (LSB)

	if (toMode == MULTI)
		sysex[5] = 0x04;

	
	snd_rawmidi_open(NULL, &device, port, SND_RAWMIDI_SYNC);
		snd_rawmidi_write(device, sysex, 7);
	snd_rawmidi_close(device);
	
	device = NULL;
}/*}}}*/

void Keyboard::set_program( const struct System &_Buffer ) noexcept/*{{{*/
{
	set_buffer( _Buffer );

	// sleep
	static struct timespec keyboardTimer;
		keyboardTimer.tv_sec 	= 0;
		keyboardTimer.tv_nsec	= 200000000;

	// cambio de página
	unsigned char pageSysEx[2][7] =    {{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x00, 0xF7},
										{0xF0, 0x42, 0x30, 0x7A, 0x4E, 0x01, 0xF7}};

	// Midi Ch = msb[0], lsb[0], pc[0] igual, solo el ultimo digito
	unsigned char msb[3] = {0xB0, 0x00, 0x3F}, lsb[3] = {0xB0, 0x20, 0x00}, pc[2] = {0xC0, 0x00};

	// ajuste
	lsb[2] = buffer.bnk - 65; /*LSB*/
	pc[1] = buffer.num; /*PC*/

	snd_rawmidi_open(NULL, &device, port, SND_RAWMIDI_SYNC);
		snd_rawmidi_write( device, pageSysEx[COMBI], 7 );
		nanosleep( &keyboardTimer, NULL );
			snd_rawmidi_write(device, msb, 3);
			snd_rawmidi_write(device, lsb, 3);
			snd_rawmidi_write(device, pc, 2);
		snd_rawmidi_write( device, pageSysEx[TIMBRE], 7 );
		nanosleep( &keyboardTimer, NULL );
	snd_rawmidi_close(device); /*CLOSE*/
	device = NULL;

	set_variation( buffer.variacion_inicial );
}/*}}}*/

void Keyboard::set_song(const char song)/*{{{*/
{
	snd_rawmidi_t *device = NULL;
	const char *port = "hw:1,0,0";
	unsigned char songSelect[2] = {0xF3, 0x00};

	
	snd_rawmidi_open(NULL, &device, port, SND_RAWMIDI_SYNC); /*Open*/
		songSelect[1] = song; /*SongSelect */
			snd_rawmidi_write(device, songSelect, 2);	
	snd_rawmidi_close(device); /*CLOSE*/

	device = NULL;
}/*}}}*/

void Keyboard::toggle_MIDI_state() noexcept/*{{{*/
{
	MIDI = ( MIDI == Switch::OFF ? ON : OFF );
}/*}}}*/

enum Switch Keyboard::get_MIDI_state() noexcept/*{{{*/
{
	return MIDI;
}/*}}}*/
